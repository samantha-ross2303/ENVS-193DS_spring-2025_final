---
title: "ENVS-193DS_spring-2025_final"
author: "Samantha Ross"
date: "11-06-2025"
format:
  html:
    toc: true # use this to display a table of contents
execute:
  message: false # use this to make sure messages don't show up
  warning: false # use this to make sure warnings don't show up
---

# Set up

```{r set-up}

library(tidyverse)
library(lubridate)
library(ggplot2)
library(flextable)
library(gt)
library(here)
library(janitor)
library(readxl)
library(dplyr)
library(scales)

sst <- read_csv(here("data", "SST_update2023.csv")) # storing SBC LTER sea surface temp data as an object called sst

```

# Problem 1. Research writng 

## a. Transparent statistical methods

## b. More information needed

## c. Suggestions for rewriting

# Problem 2. Data visualization

## a. Cleaning and summarizing

```{r cleaning-and-summarizing}
#creating a clean data set
sst_clean <- sst |>
  #cleaning column names 
  clean_names()|>
  mutate(
    date = ymd(date), # making sure date is read as a date
    year = year(date), # creating a new column called year, read as a factor
    month = month(date) # creating a new column called month, read as a factor
    ) |> 
  # keep only data from 2018 and later
  filter(year >= 2018) |> 
  # converting year to a factor with 6 levels
  mutate(year = as_factor(year), 
         year = fct_relevel(year,
                            "2018",
                            "2019",
                            "2020",
                            "2021",
                            "2022",
                            "2023")) |> 
  # renaming numeric months to full name
  mutate(month = case_when(
    month == "1" ~ "Jan",
    month == "2" ~ "Feb",
    month =="3" ~ "Mar",
    month == "4" ~ "Apr",
    month == "5" ~ "May",
    month == "6" ~ "Jun",
    month == "7" ~ "Jul",
    month == "8" ~ "Aug",
    month == "9" ~ "Sep",
    month == "10" ~ "Oct",
    month == "11" ~ "Nov",
    month == "12" ~ "Dec"),
    # converting month to an ordered factor with 12 levels
    month = factor(month,
                   levels = c(
                     "Jan",
                     "Feb",
                     "Mar",
                     "Apr",
                     "May",
                     "Jun",
                     "Jul",
                     "Aug",
                     "Sep",
                     "Oct",
                     "Nov",
                     "Dec"),
                   ordered = TRUE)) |> 
  # grouping by year and month
  group_by(year, month) |>
  # creating a new column called mean_monthly_sst, where the mean SST is calculated, and excluding missing values, rounded to one decimal place
  summarize(mean_monthly_sst = round(mean(temp, na.rm = TRUE), 1)) |> 
  # ungroup data frame
  ungroup()

# Display 5 random rows
sst_clean |> slice_sample(n = 5)

# Structure
str(sst_clean)
```

## b. Visualize the data

```{r visualize-the-data}

# starting with the clean data frame
ggplot(sst_clean,
       aes(x = month, # month on the x-axis 
           y = mean_monthly_sst, # mean monthly sea surface temp on the y-axis
           color = year, # color by year
           group = year)) + # group by year
  # creating a line plot with specified line size
  geom_line(linewidth = 1)+
  # adding points with a specified size
  geom_point(size = 2) +
  # customizing color gradient
  scale_color_brewer(
    palette = "Blues", # blue color gradient
    direction = "1" # light to dark
  ) +
  # changing axis and legend titles
  labs(
    x = "Month", # changing the name of the x-axis
    y = "Mean monthly sea surface temperature (Â°C)", # changing the name of the y-axis
    color = "Year" # changing the name of the legend
  ) +
  # changing the theme
  theme_minimal() +
  theme(
    panel.border = element_rect(color = "grey40", fill = NA), # adding a border
    panel.grid = element_blank(), # removing the grid
    legend.position = c(0.25, 0.75), # changing the position of the legend
    # changing the text sizes and colors
    legend.title = element_text(size = 14), 
    legend.text = element_text(size = 10),
    axis.text = element_text(size = 10, color = "grey40"),
    axis.title = element_text(size = 14),
    axis.ticks = element_line(color = "grey40") # adding ticks for the axes
  )

```

# Problem 3. Data analysis
# Problem 4. Affective and exploratory visualizations


